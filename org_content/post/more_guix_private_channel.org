#+HUGO_BASE_DIR: ../../
#+HUGO_SECTION: post

#+HUGO_AUTO_SET_LASTMOD: nil

#+TITLE: More Guix: Private Channel

#+DATE: 2021-07-03

#+HUGO_TAGS: "Guix" "Functional Package Manager" "Reproducibility"
#+HUGO_CATEGORIES: "Guix"
#+AUTHOR:
#+HUGO_CUSTOM_FRONT_MATTER: :author "Peter Lo"

#+HUGO_DRAFT: true

Having introduced the basic ideas of Guix in previous posts, this time
we explore setting up a private Guix channel. Guix package definitions
are managed with git repositories called /channels/. There is an
official channel at https://git.sjtu.edu.cn/sjtug/guix.git, there are
also third party channels such as https://gitlab.com/nonguix/nonguix
(for some software which cannot be included in the official
distribution for ethical or policy-related reasons) and
https://github.com/guix-science/guix-science.git (for scientific
software, which cannot be included upstream). Unsurpringly, you can
setup your own Guix channels for your internal packages. This time we
explore setting up private channels for your custom packages.

# summary

* Motivation for private Guix channel
Although it is recommended that you contribute package definitions to
Guix proper (see
https://guix.gnu.org/manual/en/html_node/Creating-a-Channel.html and
see [[https://guix.gnu.org/manual/en/html_node/Contributing.html][contributing]] for details on how to contribute package
definitions), there are still reasons that you may want to maintain
private channels:

- a needed package is not in the official channel (yet):

  If a needed package is not currently available in the official
  channel (or other third party channel), then you can either try to
  import it with =guix import= (see [[https://guix.gnu.org/manual/en/html_node/Invoking-guix-import.html#Invoking-guix-import][Invoking guix import]]), or write
  the package definition yourself. After that, you are encouraged to
  submit a patch to add the package to the official Guix channel (see
  [[https://guix.gnu.org/manual/en/html_node/Contributing.html][contributing]] for details). But it takes time for the maintainers to
  review and merge the patch, meanwhile, you may choose to add the new
  package definition to your private channel, so that you can continue
  with your work.

- a package is internal which should not be made public:

  If a needed package is some package that you do not wish to make
  public, e.g. internal package in your company, it is natural to put
  the package definition in a private channel, so that you can still
  enjoy the benefits of Guix for dependency management.

* Private Guix channel as git repository
For convenience, we setup a git repository on [[https://github.com/][Github]], but other git
repository provides such as [[https://about.gitlab.com/][GitLab]], [[https://bitbucket.org/][Bitbucket]] should also work just
fine.

** Create a simple private Guix channel
Reference: [[https://guix.gnu.org/manual/en/html_node/Creating-a-Channel.html][Creating a Channel]]

TODO

1. Create a Github account at [[https://github.com/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F&source=header-home][Sign up]] if you do not already have one
2. Setup SSH key for Github for convenience
   - Refer to [[https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent][Generating a new SSH key and adding it to the ssh-agent]]
     and [[https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account][Adding a new SSH key to your GitHub account]] to conveniently
     access your Github account and private repositories without
     entering password
   - NOTE: I previously generated SSH key following the above
     guidelines from Github, and can push to and pull from my private
     repository just fine. But at the later testing step, Guix is
     unable to access the private channel with this error:
     #+begin_src shell
       $ guix time-machine -C channels.scm --disable-authentication --
       environment --ad-hoc python-radian
       Updating channel 'guix' from Git repository at
       'https://git.savannah.gnu.org/git/guix.git'...
       guix time-machine: warning: channel authentication disabled
       Updating channel 'my-guix-pkgs' from Git repository at
       'git@github.com:peterloleungyau/my-guix-pkgs.git'...
       guix time-machine: error: Git error: Failed to retrieve list of SSH
       authentication methods: Failed getting response
     #+end_src

     After some googling, it seems to be bug in =libssh2= which Guix
     uses for retrieving private channels:
     - https://github.com/libgit2/pygit2/issues/1013
     - https://github.com/saltstack/salt/issues/57121
     
     The suggested workaround is to generate the key in PEM format by
     using the option =-m PEM= in =ssh-keygen=, so I have tried this
     command to generate the SSH key and follow the rest of the
     instructions to add the public key to Github (and moved the SSH
     keys from my =~/.ssh/= to a temporary folder) and then Guix can
     access the private repository (from both Guix in foreign
     distribution and Guix system):
     #+begin_src shell
       ssh-keygen -m PEM -t rsa -b 4096 -C "peterloleungyau@gmail.com"
     #+end_src

     So if at the time that you are reading this and get the same
     error as above (which means the bug in =libssh2= is probably
     still unfixed), then you may try the above workaround.
3. Create a (private) git repository
   1. Signin your github account
   2. Click "New repository" in the "+" drop down menu at top right corner
      - Fill in the "Repository name", here we use =my-guix-pkgs=
      - Optionally fill in description, e.g. "my private channel of Guix packages"
      - choose whether this repository is "Public" or "Private". For illustration of internal packages, we choose "Private".
      - Optionally choose whether to initialize with a =README.md= file, a =.gitignore=, and a license.
      - Click "Create repository" to finish

        #+CAPTION Create new repository on Github
        [[file:more_guix_private_channel_create_repo.png]]

   3. Follow the instructions to clone it to your local machine, repeated here for convenience:
      - In your terminal, assuming you also have [[https://git-scm.com/downloads][git]] installed, clone
        with =git clone= command, note that the exact url will depend
        on your Github user name and your chosen repository name:
        #+begin_src shell
          # note that your url may be different, depending on your username and chosen repo name
          # the general url will be git@github.com:<user-name>/<repository-name>.git
          # also, we choose "SSH" because we alreay have setup the SSH key
          git clone git@github.com:peterloleungyau/my-guix-pkgs.git
        #+end_src
      - Note that if you have not added anything (e.g. README.md,
        =.gitignore=, or license) in the previous step, your
        repository will now be empty, but we will add content to it
        soon.
4. Add personal package definitions The repository can contain package
   definitions organized as [[https://www.gnu.org/software/guile/manual/guile.html#Modules][Guile modules]], as different
   sub-directories. For example, if you have a file
   =my-packages/ds-tools.scm=, it corresponds to a Guile module
   =(my-packages ds-tools)=. You may organize the packages in a
   sensible way you like.

   For this illustration, we first create one file in the
   repository. At the time of writing, [[https://pypi.org/project/radian/][radian]] which is "A 21 century R
   console" is still not in the official Guix repository. And in a
   previous post [[file:guix_intro_6_dev.org][Guix Introduction Part 6: R Development with Guix]] we
   used =guix import= to import the relevant package and dependencies
   for =radian= (I know, I should have submitted this to the Guix
   channel as patch, but I am kind of lazy, and life gets in the
   way). So for illustration, we will use those package definitions as
   example.
   1. Under your git repository cloned above, put the following file
      as =my-packages/ds-tools.scm= (note that we remove the last line
      =python-radian= which is only needed when the file is used with
      the =-l= option, but not needed in a channel):
      #+begin_src scheme
        (define-module (my-packages ds-tools)
          #:use-module (guix)
          #:use-module (guix licenses)
          #:use-module (guix download)
          #:use-module (guix git-download)
          #:use-module (gnu packages statistics)
          #:use-module (gnu packages python)
          #:use-module (gnu packages python-science)
          #:use-module (gnu packages python-xyz)
          #:use-module (gnu packages libffi)
          #:use-module (gnu packages check)
          #:use-module (gnu packages terminals)
          #:use-module (guix build-system python))

        (define-public python-lineedit
          (package
            (name "python-lineedit")
            (version "0.1.6")
            (source
              (origin
                (method url-fetch)
                (uri (pypi-uri "lineedit" version))
                (sha256
                  (base32
                    "0gvggy22s3qlz3r5lrwr5f4hzwbq7anyd2vfrzchldaf2mwm8ygl"))))
            (build-system python-build-system)
            (arguments `(#:tests? #f))
            (propagated-inputs
              `(("python-pygments" ,python-pygments)
                ("python-six" ,python-six)
                ("python-wcwidth" ,python-wcwidth)))
            (native-inputs
              `(("python-pexpect" ,python-pexpect)
                ("python-ptyprocess" ,python-ptyprocess)
                ("python-pyte" ,python-pyte)
                ("python-pytest" ,python-pytest)
                ("python-pytest-cov" ,python-pytest-cov)))
            (home-page "https://github.com/randy3k/lineedit")
            (synopsis
              "An readline library based on prompt_toolkit which supports multiple modes")
            (description
              "An readline library based on prompt_toolkit which supports multiple modes")
            (license #f)))

        (define-public python-rchitect
          (package
            (name "python-rchitect")
            (version "0.3.30")
            (source
              (origin
                (method url-fetch)
                (uri (pypi-uri "rchitect" version))
                (sha256
                  (base32
                    "1bg5vrgp447czgmjjky84yqqk2mfzwwgnf0m99lqzs7jq15q8ziv"))))
            (build-system python-build-system)
            (arguments `(#:tests? #f))
            (propagated-inputs
              `(("python-cffi" ,python-cffi)
                ("python-six" ,python-six)))
            (native-inputs
              `(("python-pytest" ,python-pytest)
                ("python-pytest-runner" ,python-pytest-runner)
                ("python-pytest-cov" ,python-pytest-cov)
                ("python-pytest-mock" ,python-pytest-mock)))
            (home-page "https://github.com/randy3k/rchitect")
            (synopsis "Mapping R API to Python")
            (description "Mapping R API to Python")
            (license #f)))

        (define-public python-pyte
          (package
            (name "python-pyte")
            (version "0.8.0")
            (source
             (origin
               (method url-fetch)
               (uri (pypi-uri "pyte" version))
               (sha256
                (base32
                 "1ic8b9xrg76z55qrvbgpwrgg0mcq0dqgy147pqn2cvrdjwzd0wby"))))
            (build-system python-build-system)
            (arguments
             '(#:phases
               (modify-phases %standard-phases
                 (add-after 'unpack 'remove-failing-test
                   ;; TODO: Reenable when the `captured` files required by this test
                   ;; are included in the archive.
                   (lambda _
                     (delete-file "tests/test_input_output.py")
                     #t)))))
            (propagated-inputs
             `(("python-wcwidth" ,python-wcwidth)))
            (native-inputs
             `(("python-pytest-runner" ,python-pytest-runner)
               ("python-pytest" ,python-pytest)))
            (home-page "https://pyte.readthedocs.io/")
            (synopsis "Simple VTXXX-compatible terminal emulator")
            (description "@code{pyte} is an in-memory VTxxx-compatible terminal
        emulator.  @var{VTxxx} stands for a series of video terminals, developed by
        DEC between 1970 and 1995.  The first and probably most famous one was the
        VT100 terminal, which is now a de-facto standard for all virtual terminal
        emulators.

        pyte is a fork of vt102, which was an incomplete pure Python implementation
        of VT100 terminal.")
            (license lgpl3+)))

        (define-public python-radian
          (package
            (name "python-radian")
            (version "0.5.10")
            (source
              (origin
                (method url-fetch)
                (uri (pypi-uri "radian" version))
                (sha256
                  (base32
                    "0plkv3qdgfxyrmg2k6c866q5p7iirm46ivhq2ixs63zc05xdbg8s"))))
            (build-system python-build-system)
            (arguments `(#:tests? #f))
            (propagated-inputs
              `(("python-lineedit" ,python-lineedit)
                ("python-pygments" ,python-pygments)
                ("python-rchitect" ,python-rchitect)
                ("python-six" ,python-six)))
            (native-inputs
              `(("python-coverage" ,python-coverage)
                ("python-pexpect" ,python-pexpect)
                ("python-ptyprocess" ,python-ptyprocess)
                ("python-pytest-runner" ,python-pytest-runner)
                ("python-pyte" ,python-pyte)
                ("python-pytest" ,python-pytest)))
            (home-page "https://github.com/randy3k/radian")
            (synopsis "A 21 century R console")
            (description "A 21 century R console")
            (license #f)))

      #+end_src

   2. Commit and push the file: in the terminal, in the directory of
      your cloned repository, type:
      #+begin_src shell
        # at the repository direcotry
        # stage the file
        git add my-packages/ds-tools.scm

        # check the file is properly added
        git status

        # commit, with a commit message
        git commit -m "Added ds-tools.scm"

        # push to github
        git push
      #+end_src

      Now if you go to your github repository, you should also see the
      committed file.

5. Test the private channel

   1. Create a channels file =channels.scm= somewhere, e.g. at =~/=:
      #+begin_src scheme
        (list (channel
               (name 'guix)
               (url "https://git.savannah.gnu.org/git/guix.git")
               (commit "9904a15a4c838362673c1affdbaf1e83d92fe8ff"))
              (channel
               (name 'my-guix-pkgs)
               (url "git@github.com:peterloleungyau/my-guix-pkgs.git")
               (commit "8cacb5380cb0339bd36238173d80354539ca4a59")
               (branch "master")))

      #+end_src
      Note that it is recommended that you explicitly specify the
      branch of the private channel, and you should check whether the
      default branch is =master= or =main=, e.g. by checking from your
      Github.

      Also, you should replace the commit of =my-guix-pkgs=
      (=8cacb5380cb0339bd36238173d80354539ca4a59=) above with the
      commit of your private channel repository, which you can check
      with =git log= in that repository. Yours may not be the same as
      mine here, because I made more than one commit in creating the
      respository above.
      #+begin_src shell
        $ git log
        commit 8cacb5380cb0339bd36238173d80354539ca4a59 (HEAD -> master, origin/master, origin/HEAD)
        Author: Peter Lo <peterloleungyau@gmail.com>
        Date:   Thu Jul 8 00:28:35 2021 +0800

            Define module for ds-tools.

        commit b51d236ebbbdd134bafb64e5092342a2d058ec2a
        Author: Peter Lo <peterloleungyau@gmail.com>
        Date:   Wed Jul 7 00:12:31 2021 +0800

            Added ds-tools.scm
        (END)

      #+end_src

   2. Try to create a Guix environment by:
      #+begin_src shell
        # replace ~/channels.scm with the proper path to your created channels.scm
        guix time-machine -C ~/channels.scm -- environment --ad-hoc python-radian r-minimal -- radian
      #+end_src

      Then wait a while, if all goes well, then you should be in a
      =radian= console.
** Demo: add a sample R package built from Github
We also try to add a custom R package to our private channel, and also
put the R package in a private repository, to illustrate creating
internal package.

1. Repository for R package
   - Reference for creating R package: the book [[https://r-pkgs.org/index.html][R Packages]] by Hadley
     Wickham and Jenny Bryan. [[https://r-pkgs.org/whole-game.html][Chapter 2]] of the book gives an example
     of creating a toy package.
   - [[https://gist.github.com/peterhurford/f71bf00d8866094eac6c][Notes on Hadley's "R Packages"]] gives a quick summary of the book.
   - The book has an example R package at
     [[https://github.com/jennybc/foofactors]] which is a good example
     because it depends on the [[https://rdrr.io/cran/forcats/man/forcats-package.html][forcats]] package, which is available as
     =r-forcats=.
   - We could have used this repository directly if we want to test a
     R package at public repository.
   - Since we want to test a R at private repository, we will clone
     the repository and create a private one. I tried forking the
     repository, but after that Github does not allow changing the
     forked repository from public to private "for security reasons".
     1. First clone https://github.com/jennybc/foofactors to your
        local machine, say at the home directory:
        #+begin_src shell
          # e.g. we clone to the home directory
          cd ~
          git clone https://github.com/jennybc/foofactors.git
        #+end_src

     2. Create a *private* empty repository at Github using the same
        steps as above in creating the private channel repository. I
        will keep the same name for this respository,
        i.e. =foofactors=. So the URL of my repository is
        [[git@github.com:peterloleungyau/foofactors.git][git@github.com:peterloleungyau/foofactors.git]]
     3. Push the local cloned repository to the empty repository at
        Github:
        #+begin_src shell
          cd ~/foofactors
          # change the remote origin to the new URL
          git remote set-url origin git@github.com:peterloleungyau/foofactors.git
          # now can push
          git push
        #+end_src
     4. Use =git log= to check the latest commit of the repository, to
        be used below. At the time of writing, the latest commit is
        =ef71e8d2e82fa80e0cfc249fd42f50c01924326d=
     5. (Optional) You may check at Github that now the repository is
        no longer empty.
2. Package definition for the R package
   - Besides using =guix import= to import existing package (e.g. from
     CRAN), the easiest way to write a package definition is to modify
     from a similar package.
   - In our case, we want to write a package definition for a R
     package at Github.
   - It would be convenient to clone the official Guix repository
     (https://git.savannah.gnu.org/git/guix.git) to your local
     machine:
     #+begin_src shell
       git clone https://git.savannah.gnu.org/git/guix.git
       # or you can do a shallow clone to get only the latest commit, to save time
       # git clone --depth 1 https://git.savannah.gnu.org/git/guix.git
     #+end_src

     Alternatively you may try to find cloned Guix repository at
     Github, e.g. https://github.com/zimoun/guix
   - Most R CRAN packages are in =gnu/packages/cran.scm=
   - So we may search =git= in =cran.scm= to see if we can find some
     useful package definitions as reference:
     #+begin_src shell
       # find anything related to git
       grep -w -C 5 git ~/guix/gnu/packages/cran.scm
       # or you can open cran.scm with your favorite text editor and search
     #+end_src
   - At the time of writing, the Guix repo is at commit
     =7760d28920a920791645c4485f1345af45ee7787=, and from the above
     search, it seems =r-sankeyd3= is useful as a reference, because
     it uses an explicit commit from a git repository as the package
     source. Its package definition is reproduced here for easy
     reference:
     #+begin_src scheme
       (define-public r-sankeyd3
         (let ((commit "fd50a74e29056e0d67d75b4d04de47afb2f932bc")
               (revision "1"))
           (package
            (name "r-sankeyd3")
            (version (git-version "0.3.2" revision commit))
            (source
             (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/fbreitwieser/sankeyD3")
                    (commit commit)))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0jrcnfax321pszbpjdifnkbrgbjr43bjzvlzv1p5a8wskksqwiyx"))))
            (build-system r-build-system)
            (propagated-inputs
             `(("r-d3r" ,r-d3r)
               ("r-htmlwidgets" ,r-htmlwidgets)
               ("r-shiny" ,r-shiny)
               ("r-magrittr" ,r-magrittr)))
            (home-page "https://github.com/fbreitwieser/sankeyD3")
            (synopsis "Sankey network graphs from R")
            (description
             "This package provides an R library to generate Sankey network graphs
       in R and Shiny via the D3 visualization library.")
            ;; The R code is licensed under GPLv3+.  It includes the non-minified
            ;; JavaScript source code of d3-sankey, which is released under the
            ;; 3-clause BSD license.
            (license (list license:gpl3+ license:bsd-3)))))
     #+end_src
   - We note a few things of the package definition:
     - name: =r-sankeyd3=, the Guix convention for R package is to
       have the =r-= prefix, and prefer lower case.
     - commit: =fd50a74e29056e0d67d75b4d04de47afb2f932bc= is the git commit
     - version: 0.3.2
     - revision: "1", seems here just for the version name
     - url: the URL of the git repository
     - sha256: seems some kind of hash in base32 format
     - build-system: =r-build-system= as this is a R package
     - propagated-inputs: the dependencies, which will be installed
       /visibly/ (i.e. as if the user also manually install the
       propagated input) together with this package
     - home-page: the homepage of the package
     - synopsis: a short description of the package
     - description: a longer description of the package
     - license: seems can specify one or more licenses as a list
   - We therefore need to figure out these information for =foofactors=
   - The =foofactors/DESCRIPTION= provides a lot of useful information, reproduced below for convenience:
     #+begin_src text
       Package: foofactors
       Title: Make Factors Less Aggravating
       Version: 0.0.0.9000
       Authors@R:
           person("Jane", "Doe", email = "jane@example.com", role = c("aut", "cre"))
       Description: Factors have driven people to extreme measures, like ordering
           custom conference ribbons and laptop stickers to express how HELLNO we
           feel about stringsAsFactors. And yet, sometimes you need them. Can they
           be made less maddening? Let's find out.
       License: MIT + file LICENSE
       Encoding: UTF-8
       LazyData: true
       RoxygenNote: 7.1.1
       Suggests: 
           testthat
       Imports: 
           forcats

     #+end_src
     - name: following the convention we will use =r-foofactors=
     - version: 0.0.0.9000
     - revision: can juse use 1
     - commit: determined above using =git log= to be =ef71e8d2e82fa80e0cfc249fd42f50c01924326d=
     - url: the URL of the private repository
       [[git@github.com:peterloleungyau/foofactors.git][git@github.com:peterloleungyau/foofactors.git]]
     - sha256: this is a hash of the source content
       - if the source is fetched with =url-fetch=, then we can use
         =guix download= command at the terminal to download and
         calculate the hash
       - but since we now the source is fetched with =git-fetch=,
         currently =guix download= does not support this
       - instead, according to the [[https://guix.gnu.org/cookbook/en/html_node/Extended-example.html][Extended example]] of Guix packing,
         we can use =guix hash= on the *freshly* cloned repository as
         follows:
         #+begin_src shell
           # clone the repository, make sure the content is not changed
           git clone git@github.com:peterloleungyau/foofactors.git
           # go to the repo
           cd foofactors
           # checkout the lastest commit
           # alternatively, you can checkout a specific commit
           git checkout HEAD
           # finally calculate hash
           guix hash -rx .
         #+end_src
       - in our case, the calculated hash is =1hmfwac2zdl8x6r21yy5b257c4891106ana4j81hfn6rd0rl9f72=
     - build-system: =r-build-system= as this is a R package
     - propagated-inputs: this package imports =forcats=, so include
       =r-focats= which is in Guix's official repository already
     - home-page: can simply use the original Github repository
       https://github.com/jennybc/foofactors
     - synopsis: a short description, maybe modify frmo the title "A R package to make factors less aggravating."
     - description: just copy the description above.
     - license: MIT license, but seems Guix does not have MIT license
       in =guix/licenses.scm=. From the Guix package definition files,
       seems for MIT license, =license:expat= is used.
   - With the above determined information, and referring to
     =gnu/packages/cran.scm= of the Guix repository to add some needed
     modules, we add the following file to our local channel
     repository at =~/my-packages/r-pkgs.scm=:
     #+begin_src scheme
       (define-module (my-packages r-pkgs)
         #:use-module ((guix licenses) #:prefix license:)
         #:use-module (guix packages)
         #:use-module (guix download)
         #:use-module (guix git-download)
         #:use-module (guix utils)
         #:use-module (guix build-system r)
         #:use-module (gnu packages)
         #:use-module (gnu packages statistics))

       (define-public r-foofactors
         (let ((commit "ef71e8d2e82fa80e0cfc249fd42f50c01924326d")
               (revision "1"))
           (package
             (name "r-foofactors")
             (version (git-version "0.0.0.9000" revision commit))
             (source
              (origin
                (method git-fetch)
                (uri (git-reference
                      (url "git@github.com:peterloleungyau/foofactors.git")
                      (commit commit)))
                (file-name (git-file-name name version))
                (sha256
                 (base32
                  "1hmfwac2zdl8x6r21yy5b257c4891106ana4j81hfn6rd0rl9f72"))))
             (build-system r-build-system)
             (propagated-inputs
              `(("r-forcats" ,r-forcats)))
             (home-page "https://github.com/jennybc/foofactors")
             (synopsis "A R package to make factors less aggravating.")
             (description
              "Factors have driven people to extreme measures, like ordering
       custom conference ribbons and laptop stickers to express how HELLNO we
       feel about stringsAsFactors. And yet, sometimes you need them. Can they
       be made less maddening? Let's find out.")
             (license license:expat))))
     #+end_src

     Note that we define a module corresponding the path of the file,
     and we use some modules that seem to be needed, and also the
     =(gnu packages statistics)= module because the package depends on
     =r-forcats= which resides in =(gnu packages statistics)= by
     checking with =guix search r-forcats= which shows the location of
     the file to be =gnu/packages/statistics.scm:5588:2=.
   - Local testing before commit and push
     TODO
3. Test building the package from Guix
   1. Update the channels for updated commit
   2. Try to create a Guix environment

TODO

* Channel Authentication

** GPG key

** Signing git commits

* Summary
